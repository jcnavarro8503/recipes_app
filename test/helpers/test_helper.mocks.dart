// Mocks generated by Mockito 5.4.2 from annotations
// in recipes_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:recipes_app/core/index.dart' as _i7;
import 'package:recipes_app/features/my_recipes/index.dart' as _i4;
import 'package:shared_preferences/shared_preferences.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecipeResponseModel_2 extends _i1.SmartFake
    implements _i4.RecipeResponseModel {
  _FakeRecipeResponseModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecipesRepository_3 extends _i1.SmartFake
    implements _i4.RecipesRepository {
  _FakeRecipesRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i5.SharedPreferences {
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiHandler extends _i1.Mock implements _i7.ApiHandler {
  @override
  _i6.Future<Map<String, String>> commonHeaders() => (super.noSuchMethod(
        Invocation.method(
          #commonHeaders,
          [],
        ),
        returnValue: _i6.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i6.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i6.Future<Map<String, String>>);

  @override
  _i6.Future<_i2.Response> getCustomeUrl({String? url = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomeUrl,
          [],
          {#url: url},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getCustomeUrl,
            [],
            {#url: url},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getCustomeUrl,
            [],
            {#url: url},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> get({
    String? path = r'',
    String? params = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #path: path,
            #params: params,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [],
            {
              #path: path,
              #params: params,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [],
            {
              #path: path,
              #params: params,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> post({
    String? path = r'',
    String? params = r'',
    dynamic body = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #path: path,
            #params: params,
            #body: body,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [],
            {
              #path: path,
              #params: params,
              #body: body,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [],
            {
              #path: path,
              #params: params,
              #body: body,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> put({
    String? path = r'',
    String? params = r'',
    dynamic body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #path: path,
            #params: params,
            #body: body,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [],
            {
              #path: path,
              #params: params,
              #body: body,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [],
            {
              #path: path,
              #params: params,
              #body: body,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> delete({
    String? path = r'',
    String? params = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #path: path,
            #params: params,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #path: path,
              #params: params,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #path: path,
              #params: params,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> handleResponse({required _i2.Response? response}) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleResponse,
          [],
          {#response: response},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #handleResponse,
            [],
            {#response: response},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #handleResponse,
            [],
            {#response: response},
          ),
        )),
      ) as _i6.Future<_i2.Response>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> get isOnLine => (super.noSuchMethod(
        Invocation.getter(#isOnLine),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i7.NetworkInfoImpl {
  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> get isOnLine => (super.noSuchMethod(
        Invocation.getter(#isOnLine),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [RecipesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipesRepository extends _i1.Mock implements _i4.RecipesRepository {
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>> getRecipes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecipes,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #getRecipes,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #getRecipes,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>> getMoreRecipes(
          String? nextPageUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreRecipes,
          [nextPageUrl],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #getMoreRecipes,
            [nextPageUrl],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #getMoreRecipes,
            [nextPageUrl],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>);
}

/// A class which mocks [RecipesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipesRemoteDataSource extends _i1.Mock
    implements _i4.RecipesRemoteDataSource {
  @override
  _i6.Future<_i4.RecipeResponseModel> getRecipes() => (super.noSuchMethod(
        Invocation.method(
          #getRecipes,
          [],
        ),
        returnValue: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getRecipes,
            [],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getRecipes,
            [],
          ),
        )),
      ) as _i6.Future<_i4.RecipeResponseModel>);

  @override
  _i6.Future<_i4.RecipeResponseModel> getMoreRecipes(String? nextPageUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreRecipes,
          [nextPageUrl],
        ),
        returnValue: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getMoreRecipes,
            [nextPageUrl],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getMoreRecipes,
            [nextPageUrl],
          ),
        )),
      ) as _i6.Future<_i4.RecipeResponseModel>);
}

/// A class which mocks [RecipesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipesLocalDataSource extends _i1.Mock
    implements _i4.RecipesLocalDataSource {
  @override
  _i6.Future<_i4.RecipeResponseModel> getLastRecipesCached() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastRecipesCached,
          [],
        ),
        returnValue: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getLastRecipesCached,
            [],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i4.RecipeResponseModel>.value(
            _FakeRecipeResponseModel_2(
          this,
          Invocation.method(
            #getLastRecipesCached,
            [],
          ),
        )),
      ) as _i6.Future<_i4.RecipeResponseModel>);

  @override
  _i6.Future<void> cacheRecipes(_i4.RecipeResponseModel? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRecipes,
          [data],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [GetRecipesUC].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRecipesUC extends _i1.Mock implements _i4.GetRecipesUC {
  @override
  _i4.RecipesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRecipesRepository_3(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeRecipesRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.RecipesRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>);
}

/// A class which mocks [GetMoreRecipesUC].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoreRecipesUC extends _i1.Mock implements _i4.GetMoreRecipesUC {
  @override
  _i4.RecipesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRecipesRepository_3(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeRecipesRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.RecipesRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>> call(
          _i4.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>.value(
                _FakeEither_1<_i7.Failure, _i4.RecipeResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i4.RecipeResponseEntity>>);
}
